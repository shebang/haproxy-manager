# Simple configuration for an HTTP proxy listening on port 80 on all
# interfaces and forwarding requests to a single backend "servers" with a
# single server "server1" listening on 127.0.0.1:8000
global
    daemon
    maxconn 256
    stats socket /var/run/haproxy/haproxy.sock mode 600 level admin
    stats timeout 2m

defaults
    mode http
    log global
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    option  httplog
    option  dontlognull
    balance roundrobin

frontend http-in
    bind *:80
    mode http

    # enable health check for this haproxy node
    # will return 200 when sending a GET request to /haproxy_ping
    monitor-uri /ping

    # default backend servers
    default_backend servers

    # filter out websockets, please note that AND is implicit so all conditions must be true
    acl is_websocket path_beg /socket.io
    acl is_websocket hdr(Upgrade) -i WebSocket
    acl is_websocket hdr_beg(Host) -i ws

    # The connection to use if 'is_websocket' is flagged
    use_backend websockets if is_websocket

#peers mypeers
#    peer localhost 127.0.0.1:1024

backend servers
    server haproxy-manager-http-echo1 haproxy-manager-http-echo1:8080 maxconn 32 check port 8080
    server haproxy-manager-http-echo2 haproxy-manager-http-echo2:8081 maxconn 32 check port 8081
    server haproxy-manager-http-echo3 haproxy-manager-http-echo3:8082 maxconn 32 check port 8082

backend websockets
    balance url_param sID
    option http-server-close
    option forceclose
    #option httpchk GET /ping HTTP/1.0
    #stick on urlp(sID)
    #stick-table type string len 80 size 5M expire 30m peers mypeers
    #server someserver 192.168.1.1 weight 1 maxconn 1024 check port 80
